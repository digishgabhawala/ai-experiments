# High-Level Design: Static Website Server

## 1. Overview

The system will be a simple, single-process web server written in Python. It will serve static files (HTML, CSS, JS) from a designated directory to a client's web browser over HTTP.

## 2. Components

- **Web Server (`main.py`):** A Python script that starts an HTTP server. It will be configured to serve files from the `static/` directory.
- **Static Content (`static/` directory):**
    - `index.html`: The main entry point of the website.
    - `style.css`: For basic styling.
    - `script.js`: For client-side interactivity.

## 3. Architecture & Data Flow

The architecture is a simple client-server model.

```
+----------+         HTTP Request         +--------------+
|          | ---------------------------> |              |
|  Client  |                              |  Web Server  |
| (Browser)|         HTTP Response        |  (`main.py`) |
|          | <--------------------------- |              |
+----------+                              +-------+------+
                                                  |
                                                  | Serves files from
                                                  v
                                          +--------------+
                                          | `static/`    |
                                          |  directory   |
                                          +--------------+
```

1.  The user starts the server by running `python main.py`.
2.  The user opens a web browser and navigates to `http://localhost:8000`.
3.  The browser sends an HTTP GET request for `/` to the server.
4.  The server receives the request and, because it's for the root path, serves `static/index.html`.
5.  The browser parses `index.html`, identifies the linked `style.css` and `script.js` files, and sends separate GET requests for them.
6.  The server serves these files in response.
7.  The browser renders the complete page.

## 4. Security Considerations

- The server will use Python's `http.server` with `SimpleHTTPRequestHandler`. This handler has a known security risk: it can serve any file within the directory it's run from (and subdirectories). To mitigate this, we will explicitly change the server's working directory to `static/` before starting it. This ensures that only files within the `static/` directory can be served, preventing accidental exposure of source code or other project files.
