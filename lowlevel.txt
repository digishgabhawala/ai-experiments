# Low-Level Design: Snake and Ladder Game

## 1. `main.py` - Web Server
- **Objective:** Start a simple HTTP server to serve files from the `static` directory.
- **Implementation Details:**
    - No changes from the previous design. The server's role remains the same.

## 2. `static/index.html`
- **Objective:** Provide the HTML structure for all game views.
- **Content:**
    - A main container `div` with an ID like `app`.
    - Inside `#app`, two main `div` elements will exist:
        - A "Welcome Screen" `div` with an ID like `welcome-screen`. It will be visible by default.
            - An `h1` with the text "Snake and Ladder".
            - A `button` with an ID like `play-button` and the text "Play".
        - A "Game Screen" `div` with an ID like `game-screen`. It will be hidden by default using a CSS class (e.g., `hidden`).
            - It will contain a `div` with an ID like `game-board`.
            - Inside `#game-screen`:
                - A `div` with an ID like `turn-indicator` (already implemented).
                - A `button` with an ID like `roll-dice-button` and the text "Roll Dice".

## 3. `static/style.css`
- **Objective:** Style the different game views and UI elements.
- **Content:**
    - Basic styles for the `body` to center content.
    - Styles for the `#welcome-screen` to format it as a distinct view.
    - A utility class `.hidden` with the property `display: none;` to easily toggle the visibility of views.
    - Styles for the `#game-board` to create a 10x10 grid layout.
    - Styles for the individual board squares (`.square`).
    - **New:** Styles for the player piece (`.player-piece`).
    - Styles for the `#turn-indicator` (already implemented).
    - Basic styling for `#roll-dice-button` to make it visually distinct.

## 4. `static/script.js`
- **Objective:** Manage UI transitions, initial game setup, and dice roll logic.
- **Content:**
    - A variable `playerPosition` will be added to track the player's current square, initialized to 1.
    - The `createBoard()` function will be modified. After creating the squares, it will create a `div` for the player piece, add a `.player-piece` class to it, and append it to the first square on the board.
    - An event listener for `DOMContentLoaded`.
    - Inside the listener:
        - Get references to the `#welcome-screen`, `#game-screen`, and `#play-button` elements.
        - Get a reference to the `#game-board` element.
        - A function `createBoard()` will be called to generate the 100 squares of the board dynamically and append them to the `#game-board` element.
        - Add a `click` event listener to the `#play-button`.
        - When the `#play-button` is clicked:
            - Add the `hidden` class to the `#welcome-screen`.
            - Remove the `hidden` class from the `#game-screen`.
        - Get a reference to the `#roll-dice-button`.
        - Add a `click` event listener to `#roll-dice-button`.
        - Inside the event listener:
            - Generate a random integer between 1 and 6 (inclusive) to simulate a dice roll.
            - Update the `textContent` of the `#turn-indicator` to display the dice roll result (e.g., "You rolled a 5!").

## 5. Testing Plan
- **Manual Testing:**
    1. Run `python main.py`.
    2. Open `http://localhost:8000`.
    3. Click the "Play" button.
    4. **Verify:** A 10x10 grid representing the game board is displayed.
    5. **Verify:** The squares are numbered from 1 to 100.
    6. **Verify:** A distinct player piece (e.g., a colored circle) is visible on the first square of the board.
    7. **Verify:** A "Roll Dice" button is visible on the game screen.
    8. **Verify:** Clicking the "Roll Dice" button displays a random number between 1 and 6 in the turn indicator.
- **Automated Testing:**
    - **UI Test (`test_game.py`):**
        - A new test will be added to `test_game.py`.
        - It will click the "Play" button.
        - It will then find the `#game-board` element and assert that it contains 100 squares.
        - A new test will be added to verify the player piece.
        - After clicking "Play", it will find the first square on the board.
        - It will assert that this square contains a child element with the class `.player-piece`.
        - Add a new test case `test_dice_roll_display`.
        - This test will:
            - Navigate to the game and click the "Play" button.
            - Find the "Roll Dice" button and click it.
            - Assert that the `#turn-indicator` is displayed and its text content is a valid dice roll message (e.g., contains "You rolled a " and a number between 1 and 6).
